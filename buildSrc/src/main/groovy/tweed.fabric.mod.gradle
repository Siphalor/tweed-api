import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar;

plugins {
	id 'tweed.fabric'
	id 'com.github.johnrengelman.shadow'
}

project.archivesBaseName = project.archives_base_name

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenCentral()
	maven { url "https://maven.siphalor.de" }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://jitpack.io" }
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter:5+"
}

loom {
	runs {
		client {
			ideConfigGenerated = true
		}
		remove server
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

jar {
	archiveClassifier.set("dev")
	from "LICENSE"
	finalizedBy(shadowJar)
}

test {
	useJUnitPlatform()
}

tasks.register('shadowSourcesJar', ShadowJar) {
	relocators = shadowJar.relocators
	from sourceSets.main.output
	configurations = [project.configurations.shadow]
	archiveBaseName.set(archives_base_name)
	archiveClassifier.set("sources")
}
tasks.remapSourcesJar.dependsOn(tasks.shadowSourcesJar)

tasks.named("shadowJar") {
	configurations = [project.configurations.shadow]
	archiveBaseName.set(archives_base_name)
	archiveClassifier.set("dev")
}

tasks.named("remapJar") {
	dependsOn(tasks.shadowJar)
	inputFile = tasks.shadowJar.archiveFile
	archiveFileName = "${project.archives_base_name}-${project.version}.jar"
}

processResources {
	inputs.property "version", project.version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": project.version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveBaseName.set(project.archives_base_name)
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
	finalizedBy(tasks.shadowSourcesJar)
}

tasks.register('updateModMetaFiles', Copy) {
	def projectId = project.archives_base_name.replace('-', '_')
	from rootProject.file(".template/icon.png")
	into "src/main/resources/assets/${projectId}"
	include "*.png"
	outputs.upToDateWhen { false }
	doLast {
		def slurper = new JsonSlurper()
		def template = slurper.parse(rootProject.file(".template/fabric.mod.json"))
		def path = file("src/main/resources/fabric.mod.json")
		def json = path.exists() ? slurper.parse(path) : new HashMap<>()
		json += template
		file("src/main/resources/fabric.mod.json")
				.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)).replace("\${project}", projectId) + "\n")
	}
}

def projectId = archives_base_name.replaceAll(/-(\w)/, { it[1].toUpperCase() })

// configure the maven publication
publishing {
	publications.create(projectId, MavenPublication.class, {
		version = project.version
		artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"

		from components.java
		java.withSourcesJar()
	})
}
